{"mappings":"AAAA,IAAIA,GAAKC,IAAIC,OAAO,wBAEhBC,KAAOC,SAASC,cAAc,SAElCC,QAAQC,IAAIP,IAEZ,IAAIQ,KAAOP,IAAIC,OAAO,6CAEtBC,KAAKM,YAAYD,MAEjBP,IAAIS,MAAMF,KAAMR,IAGhB,MAAMW,KAAQV,IAAIC,OAAO,mCAGzBD,IAAIW,KAAKT,KAAMQ,MAGf,MAAME,MAAQZ,IAAIa,MAAMC,OAAOD,OAC/BR,QAAQC,IAAIM,OAGZZ,IAAIe,KAAKR,KAAM,QAAS,cACxB,MAAMS,MAAQhB,IAAIe,KAAKR,KAAM,SAC7BF,QAAQC,IAAI,UAAUU,SAGtBhB,IAAIiB,KAAKV,KAAM,cAGfP,IAAIkB,MAAMX,KAAM,CAACY,OAAQ,gBAAiBC,MAAM,SAEhD,IAAIC,WAAarB,IAAIkB,MAAMX,KAAM,UACjCF,QAAQC,IAAIe,YAEZrB,IAAIkB,MAAMX,KAAM,SAAU,iBAI1BP,IAAIsB,MAAMC,IAAIhB,KAAM,OACpBP,IAAIsB,MAAMC,IAAIhB,KAAM,QAEpBP,IAAIsB,MAAME,OAAOjB,KAAM,OAEvBF,QAAQC,IAAIN,IAAIsB,MAAMG,IAAIlB,KAAM,SAGhC,MAAMmB,GAAK,KACPrB,QAAQC,IAAI,WAGhBN,IAAI2B,GAAGpB,KAAM,QAASmB,IAEtB1B,IAAI4B,IAAIrB,KAAM,QAASmB,IAGvB,MAAMG,QAAU7B,IAAI8B,KAAK,SAAS,GAClCzB,QAAQC,IAAIuB,SAEZxB,QAAQC,IAAIN,IAAI8B,KAAK,OAAQD,UAG7BxB,QAAQC,IAAIN,IAAI+B,OAAOxB,OAEvB,MAAMyB,GAAKhC,IAAI8B,KAAK,OAAO,GAE3BzB,QAAQC,IAAIN,IAAIiC,SAASD,KAEzB3B,QAAQC,IAAIN,IAAIkC,KAAKF,KAErB3B,QAAQC,IAAIN,IAAImC,SAASH,KAGzB,MAAMI,EAAIpC,IAAI8B,KAAK,WAAW,GAC9B9B,IAAIqC,KAAKrC,IAAIsC,SAASF,IAAKG,GAAIvC,IAAIkB,MAAMqB,EAAG,QAAS,SAGrDlC,QAAQC,IAAIN,IAAIwC,MAAMR","sources":["src/main.js"],"sourcesContent":["﻿let td = dom.create('<tr><td>hi</td></tr>');\r\n\r\nlet div2 = document.querySelector('#div2');\r\n\r\nconsole.log(td);\r\n\r\nlet test = dom.create('<div id = \"test\" title = \"Hi!\">test</div>');\r\n\r\ndiv2.appendChild(test);//添加到body元素中\r\n\r\ndom.after(test, td);\r\n\r\n//创建作为父元素的div3\r\nconst div3 =  dom.create('<div id = \"parent\">parent</div>')\r\n\r\n//将div3作为div2的父元素\r\ndom.wrap(div2, div3)\r\n\r\n//删除empty里的所有元素，并它们移到nodes中\r\nconst nodes = dom.empty(window.empty)\r\nconsole.log(nodes)\r\n\r\n//将id为test的元素中的title标签属性改为 'Hello, boy'\r\ndom.attr(test, 'title', 'Hello, boy')\r\nconst title = dom.attr(test, 'title')\r\nconsole.log(`title: ${title}`)\r\n\r\n//将id为test的元素中所有内容替换为新文本\r\ndom.text(test, '你好，这是新加的内容')\r\n\r\n//修改test的style属性(3个输入)\r\ndom.style(test, {border: '1px solid red', color:'blue'});\r\n//读取test的style属性\r\nlet testBorder = dom.style(test, 'border');\r\nconsole.log(testBorder)\r\n//修改test的style属性(2个输入)\r\ndom.style(test, 'border', '1px solid red');\r\n\r\n//给test分别添加名为red和blue的class\r\n//此时html文件已经有 .red 背景色为红的 style ，可以辅助判断\r\ndom.class.add(test, 'red')\r\ndom.class.add(test, 'blue')\r\n//移除test名为red的class\r\ndom.class.remove(test, 'red')\r\n//判断test中是否有名为blue的class\r\nconsole.log(dom.class.has(test, 'blue'))\r\n\r\n//创建鼠标点击时执行的函数\r\nconst fn = ()=>{\r\n    console.log('点击test')\r\n}\r\n//为test添加监听事件\r\ndom.on(test, 'click', fn)\r\n//移除test的监听事件\r\ndom.off(test, 'click', fn)\r\n\r\n//获取id为test的第一个div\r\nconst testDiv = dom.find('#test')[0]\r\nconsole.log(testDiv)\r\n//获取testDiv元素里，class为red的元素\r\nconsole.log(dom.find('.red', testDiv))\r\n\r\n//获取test的父元素\r\nconsole.log(dom.parent(test))\r\n\r\nconst s2 = dom.find('#s2')[0]\r\n//获取s2的兄弟姐妹\r\nconsole.log(dom.siblings(s2))\r\n//获取s2的下一个节点\r\nconsole.log(dom.next(s2))\r\n//获取s2的上一个节点\r\nconsole.log(dom.previous(s2))\r\n\r\n//对id为travel的div遍历，使其style的color为red\r\nconst t = dom.find('#travel')[0]\r\ndom.each(dom.children(t), (n)=>dom.style(n, 'color', 'red'))\r\n\r\n//获取s2在兄弟姐妹中的下标\r\nconsole.log(dom.index(s2))"],"names":["td","dom","create","div2","document","querySelector","console","log","test","appendChild","after","div3","wrap","nodes","empty","window","attr","title","text","style","border","color","testBorder","class","add","remove","has","fn","on","off","testDiv","find","parent","s2","siblings","next","previous","t","each","children","n","index"],"version":3,"file":"index.701b74ef.js.map"}