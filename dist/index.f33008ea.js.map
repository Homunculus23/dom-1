{"mappings":"AAAAA,OAAOC,IAAM,CAGTC,OAAQC,GACJ,MAAMC,EAAYC,SAASC,cAAc,YAIzC,OADAF,EAAUG,UAAYJ,EAAOK,OACtBJ,EAAUK,QAAQC,YAE7BC,MAAOC,EAAMC,GACTD,EAAKE,WAAWC,aAAaF,EAAOD,EAAKI,cAE7CC,OAAQL,EAAKC,GACTD,EAAKE,WAAWC,aAAaF,EAAOD,IAExCM,OAAQC,EAAQP,GACZO,EAAOC,YAAYR,IAEvBS,KAAMT,EAAMO,GACRlB,IAAIgB,OAAOL,EAAMO,GACjBlB,IAAIiB,OAAOC,EAAQP,IAIvBU,OAAQV,IACJA,EAAKE,WAAWS,YAAYX,GACrBA,GAEXY,MAAOZ,GACH,MAAMa,WAACA,GAAcb,EACfc,EAAQ,GACd,IAAIC,EAAIf,EAAKF,WACb,KAAMiB,GACFD,EAAME,KAAK3B,IAAIqB,OAAOV,EAAKF,aAC3BiB,EAAIf,EAAKF,WAcX,OAAMgB,GAQZG,KAAMjB,EAAMkB,EAAMC,GACd,OAAwB,IAArBC,UAAUC,OAAYrB,EAAAsB,aAAAJ,EAAAC,GACG,IAArBC,UAAAC,OACMrB,EAAAuB,aAAyBL,QADlC,G,OAMG3B,G,GAGa,I,UAAZ8B,OAEP,gBAAArB,IAAAwB,YAAAjC,EACJS,EAAAyB,UAAAlC,OACS,GAAU,IAAR6B,UAAQC,OACb,sBAAqBrB,EACfA,EAASwB,YACTxB,EAAUyB,WAKvBC,KAAK1B,EAAMT,GACP,GAAwB,IAArB6B,UAAUC,OACTrB,EAAKL,UAAWJ,OACd,GAAwB,IAArB6B,UAAUC,OAAa,OAAArB,EAAAL,W,QAIxBuB,EAAMC,G,GACS,I,UAAXE,OACArB,EAAK2B,MAAMT,GAAOC,OAEzB,OAAAC,UAAAC,OAAA,CACJ,oBAAAH,EAAA,OAAAlB,EAAA2B,MAAAT,GACJ,GAAAA,aAAAU,OAAA,CACM,MAAAC,EAAAX,EACC,IAAM,IAAAY,KAAUD,EAAA7B,EAAA2B,MAAAG,GAAAD,EAAAC,M,WAKnB9B,EAAA+B,GACE/B,EAAKgC,UAAEC,IAAUF,I,OAEnB/B,EAAA+B,GACJ/B,EAAAgC,UAAAtB,OAAAqB,IAEGG,IAAI,CAAClC,EAAA+B,IACR/B,EAAAgC,UAAAG,SAAAJ,I,GAGA/B,EAAAoC,EAAAC,GAGErC,EAAAsC,iBAAAF,EAAAC,I,IAECrC,EAAAoC,EAAAC,GACArC,EAAAuC,oBAAyBH,EAAEC,IAG/BG,KAAA,CAAMC,EAAQC,KAEbA,GAAAjD,UAAAkD,iBAAAF,G,OAGAzC,GACSA,EAAME,W,SAEZF,GACHA,EAAA4C,S,SAEQ5C,GACL6C,MAAAC,KAAA9C,EAAAE,WAAmC0C,UACtBG,QAAQC,OAChBhD,I,KAGRA,GACD,IAAQe,EAAEf,EAAMI,YAEZ,KAAMW,GAAoB,IAAfA,EAAEkC,UACTlC,EAAIA,EAAEX,YAEV,OAAOW,GAEXmC,SAAMlD,GACF,IAAKe,EAAIf,EAAKmD,gBAGjB,KAAApC,GAAA,IAAAA,EAAAkC,UAAAlC,IAAAoC,gBACD,OAAWpC,G,KAEPqC,EAAaf,G,IACT,IAAGgB,EAAI,EAAGA,EAAAD,EACN/B,OAASgC,IAAAhB,EAAAiB,KAAA,KAAAF,EAAAC,K,MAGpBrD,GACH,MAAAuD,EAAAlE,IAAAuD,SAAA5C,EAAAE,Y","sources":["src/DOM.js"],"sourcesContent":["﻿window.dom = {\r\n    //增\r\n    //所有操作的目的位置，无法位于html文件中，包含DOM.js和main.js的script之后\r\n    create (string) {   //创建节点,可以用于创建纯文本\r\n        const container = document.createElement('template');\r\n        //container:容器 \r\n        //template标签 -> 可以容纳任意标签的容器标签，它不会显示在页面中。\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild;\r\n    },\r\n    after (node, node2) { //在node后面创建node2\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    before (node,node2) { //在node之前创建node2\r\n        node.parentNode.insertBefore(node2, node);\r\n    },\r\n    append (parent, node) {   //新增一个儿子\r\n        parent.appendChild(node);   //该代码会将node从原来的位置上“移”到parent的子代\r\n    },\r\n    wrap (node, parent) { //新增一个爸爸\r\n        dom.before(node, parent);\r\n        dom.append(parent, node);   //利用了appendChild的特性\r\n    },\r\n\r\n    //删：删除，并将被删除的信息作为返回值\r\n    remove (node) {   //移除一个节点\r\n        node.parentNode.removeChild(node);\r\n        return node;    //返回node是为了保留节点的引用\r\n    },\r\n    empty (node) {    //移除所有子元素\r\n        const {childNodes} = node;\r\n        const array = [];\r\n        let x = node.firstChild;\r\n        while(x){\r\n            array.push(dom.remove(node.firstChild));\r\n            x = node.firstChild;\r\n        }\r\n        /*失败案例：由于 childNodes 数组是实时变化的，因此下标i无法实时捕捉目标元素并清除\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            dom.remove(childNodes[i]);\r\n            array.push(childNodes[i]);\r\n        }\r\n        */\r\n        return array    //返回包含所有子元素的数组，包含回车、空格等元素在内\r\n    },\r\n\r\n\r\n    //改：有则改，无则增\r\n    //attr使用了JS中的重载法，JS只能这样重载\r\n    attr (node, name, value){   //修改节点信息\r\n        if(arguments.length === 3){\r\n            return node.setAttribute(name, value);\r\n        }else if(arguments.length === 2){\r\n            return node.getAttribute(name);\r\n        }\r\n    },\r\n    //text中应用了 版本适配 的思想，同时还应用了重载的思想\r\n    text (node, string) {   //将node中的所有文本内容替换为string\r\n        if(arguments.length === 2){\r\n            if('textContent' in node){\r\n                node.textContent = string;    //支持IE新版本，和其他所有浏览器\r\n            }else{\r\n                node.innerText = string;    //支持IE旧版本\r\n            }\r\n        }else if(arguments.length === 1){\r\n            if('textContent' in node){\r\n                return node.textContent;\r\n            }else{\r\n                return node.innerText;\r\n            }\r\n        }\r\n    },\r\n    html (node, string) {   //将node中的所有html内容替换为string\r\n        if(arguments.length === 2){\r\n            node.innerHTML = string;\r\n        }else if(arguments.length === 1){\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n    //适应三种不同格式，重载3次\r\n    style (node, name, value) {  //修改node中的style属性\r\n        if(arguments.length === 3){\r\n            node.style[name] = value;\r\n        }else if(arguments.length === 2){\r\n            if(typeof name === 'string'){\r\n                return node.style[name]\r\n            }else if(name instanceof Object){\r\n                const obj = name;\r\n                for(let key in obj){\r\n                    node.style[key] = obj[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class: {    //class操作对象组\r\n        add(node, className){   //添加class\r\n            node.classList.add(className);\r\n        },\r\n        remove(node, className){    //移除class\r\n            node.classList.remove(className);\r\n        },\r\n        has(node, className){   //判断class是否存在\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n    on (node, eventName, fn) {    //为node添加鼠标点击的监听事件\r\n        node.addEventListener(eventName, fn);\r\n    },\r\n    off (node, eventName, fn) {   //移除node上的鼠标点击监听\r\n        node.removeEventListener(eventName, fn);\r\n    },\r\n\r\n\r\n    //查\r\n    find (selector, scope) {   //获取所有id为selector的元素\r\n        //  短路逻辑||：从左至右取第一个真值，或最后一个\r\n        return (scope || document).querySelectorAll(selector);\r\n        //当元素中的内容过多时，该方法获取的返回值是一个数组，获取该元素需要加上[0]\r\n    },\r\n    parent (node) {   //获取node的父元素\r\n        return node.parentNode;\r\n    },\r\n    children (node) { //获取node的子元素\r\n        return node.children;\r\n    },\r\n    siblings (node) { //获取所有的兄弟姐妹\r\n        let array = Array.from(node.parentNode.children);\r\n        return array.filter(n => n !== node);\r\n    },\r\n    next (node) {   //获取node的下一个元素节点，没有则返回空\r\n        let x = node.nextSibling;\r\n        //短路逻辑&&：取第一个假值，或最后一个。若x不存在，则不会进入循环\r\n        while(x && x.nodeType !== 1){   //x.nodeType 1是元素，3是文本\r\n            x = x.nextSibling;\r\n        }\r\n        return x;\r\n    },\r\n    previous (node) { //获取node的前一个元素节点，细节同上\r\n        let x = node.previousSibling;\r\n        while(x && x.nodeType !== 1){\r\n            x = x.previousSibling;\r\n        }\r\n        return x;\r\n    },\r\n    each (nodeList, fn) {   //遍历nodeList，用fn进行操作\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i]);\r\n        }\r\n    },\r\n    index (node) {  //获取node在兄弟姐妹中的下标\r\n        const list = dom.children(node.parentNode);\r\n        for (let i = 0; i < list.length; i++) {\r\n            if(list[i] === node){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n};"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","childNodes","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","textContent","innerText","html","style","Object","obj","key","className","classList","add","has","contains","eventName","fn","addEventListener","removeEventListener","find","selector","scope","querySelectorAll","children","Array","from","filter","n","nodeType","previous","previousSibling","nodeList","i","call","list"],"version":3,"file":"index.f33008ea.js.map"}