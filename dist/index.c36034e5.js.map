{"mappings":"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","sources":["src/DOM.js"],"sourcesContent":["﻿window.dom = {\r\n    //增\r\n    //所有操作的目的位置，无法位于html文件中，包含DOM.js和main.js的script之后\r\n    create (string) {   //创建节点,可以用于创建纯文本\r\n        const container = document.createElement('template');\r\n        //container:容器 \r\n        //template标签 -> 可以容纳任意标签的容器标签，它不会显示在页面中。\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild;\r\n    },\r\n    after (node, node2) { //在node后面创建node2\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    before (node,node2) { //在node之前创建node2\r\n        node.parentNode.insertBefore(node2, node);\r\n    },\r\n    append (parent, node) {   //新增一个儿子\r\n        parent.appendChild(node);   //该代码会将node从原来的位置上“移”到parent的子代\r\n    },\r\n    wrap (node, parent) { //新增一个爸爸\r\n        dom.before(node, parent);\r\n        dom.append(parent, node);   //利用了appendChild的特性\r\n    },\r\n\r\n    //删：删除，并将被删除的信息作为返回值\r\n    remove (node) {   //移除一个节点\r\n        node.parentNode.removeChild(node);\r\n        return node;    //返回node是为了保留节点的引用\r\n    },\r\n    empty (node) {    //移除所有子元素\r\n        const {childNodes} = node;\r\n        const array = [];\r\n        let x = node.firstChild;\r\n        while(x){\r\n            array.push(dom.remove(node.firstChild));\r\n            x = node.firstChild;\r\n        }\r\n        /*失败案例：由于 childNodes 数组是实时变化的，因此下标i无法实时捕捉目标元素并清除\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            dom.remove(childNodes[i]);\r\n            array.push(childNodes[i]);\r\n        }\r\n        */\r\n        return array    //返回包含所有子元素的数组，包含回车、空格等元素在内\r\n    },\r\n\r\n\r\n    //改：有则改，无则增\r\n    //attr使用了JS中的重载法，JS只能这样重载\r\n    attr (node, name, value){   //修改节点信息\r\n        if(arguments.length === 3){\r\n            return node.setAttribute(name, value);\r\n        }else if(arguments.length === 2){\r\n            return node.getAttribute(name);\r\n        }\r\n    },\r\n    //text中应用了 版本适配 的思想，同时还应用了重载的思想\r\n    text (node, string) {   //将node中的所有文本内容替换为string\r\n        if(arguments.length === 2){\r\n            if('textContent' in node){\r\n                node.textContent = string;    //支持IE新版本，和其他所有浏览器\r\n            }else{\r\n                node.innerText = string;    //支持IE旧版本\r\n            }\r\n        }else if(arguments.length === 1){\r\n            if('textContent' in node){\r\n                return node.textContent;\r\n            }else{\r\n                return node.innerText;\r\n            }\r\n        }\r\n    },\r\n    html (node, string) {   //将node中的所有html内容替换为string\r\n        if(arguments.length === 2){\r\n            node.innerHTML = string;\r\n        }else if(arguments.length === 1){\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n    //适应三种不同格式，重载3次\r\n    style (node, name, value) {  //修改node中的style属性\r\n        if(arguments.length === 3){\r\n            node.style[name] = value;\r\n        }else if(arguments.length === 2){\r\n            if(typeof name === 'string'){\r\n                return node.style[name]\r\n            }else if(name instanceof Object){\r\n                const obj = name;\r\n                for(let key in obj){\r\n                    node.style[key] = obj[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class: {    //class操作对象组\r\n        add(node, className){   //添加class\r\n            node.classList.add(className);\r\n        },\r\n        remove(node, className){    //移除class\r\n            node.classList.remove(className);\r\n        },\r\n        has(node, className){   //判断class是否存在\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n    on (node, eventName, fn) {    //为node添加鼠标点击的监听事件\r\n        node.addEventListener(eventName, fn);\r\n    },\r\n    off (node, eventName, fn) {   //移除node上的鼠标点击监听\r\n        node.removeEventListener(eventName, fn);\r\n    },\r\n\r\n\r\n    //查\r\n    find (selector, scope) {   //获取所有id为selector的元素\r\n        //  短路逻辑||：从左至右取第一个真值，或最后一个\r\n        return (scope || document).querySelectorAll(selector);\r\n        //当元素中的内容过多时，该方法获取的返回值是一个数组，获取该元素需要加上[0]\r\n    },\r\n    parent (node) {   //获取node的父元素\r\n        return node.parentNode;\r\n    },\r\n    children (node) { //获取node的子元素\r\n        return node.children;\r\n    },\r\n    siblings (node) { //获取所有的兄弟姐妹\r\n        let array = Array.from(node.parentNode.children);\r\n        return array.filter(n => n !== node);\r\n    },\r\n    next (node) {   //获取node的下一个元素节点，没有则返回空\r\n        let x = node.nextSibling;\r\n        //短路逻辑&&：取第一个假值，或最后一个。若x不存在，则不会进入循环\r\n        while(x && x.nodeType !== 1){   //x.nodeType 1是元素，3是文本\r\n            x = x.nextSibling;\r\n        }\r\n        return x;\r\n    },\r\n    previous (node) { //获取node的前一个元素节点，细节同上\r\n        let x = node.previousSibling;\r\n        while(x && x.nodeType !== 1){\r\n            x = x.previousSibling;\r\n        }\r\n        return x;\r\n    },\r\n    each (nodeList, fn) {   //遍历nodeList，用fn进行操作\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i]);\r\n        }\r\n    },\r\n    index (node) {  //获取node在兄弟姐妹中的下标\r\n        const list = dom.children(node.parentNode);\r\n        for (let i = 0; i < list.length; i++) {\r\n            if(list[i] === node){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n};"],"names":[],"version":3,"file":"index.c36034e5.js.map","sourceRoot":"/__parcel_source_root/"}